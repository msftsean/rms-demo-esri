name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.x'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp, javascript
        queries: security-extended,security-and-quality

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        echo "Restoring .NET dependencies..."
        # dotnet restore

    - name: Build application
      run: |
        echo "Building application..."
        # dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

    - name: Run Dependency Review
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

  - name: Install dependencies (frontend + backend)
      run: |
    set -e
    pushd frontend
    npm install --no-audit --no-fund
    npm run build
    popd
    dotnet restore

    - name: Build backend
      run: |
        set -e
        dotnet build --configuration Release --no-restore

    - name: Run unit tests
      run: |
        set -e
        dotnet test --logger trx --results-directory TestResults

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add integration test commands

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

  # Coverage upload omitted to keep pipeline simple

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t rms-demo:${{ github.sha }} .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'rms-demo:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment jobs removed to keep repo focused on local k3s usage
