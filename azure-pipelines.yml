# Azure Pipelines YAML for RMS Demo ESRI Project
trigger:
- main
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  DOTNET_VERSION: '8.x'
  NODE_VERSION: '18'
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: '1'
  DOTNET_USE_POLLING_FILE_WATCHER: '1'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test Job'
    steps:
    - checkout: self
      fetchDepth: '0'
      
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(DOTNET_VERSION)

    - task: NodeTool@0
      displayName: 'Use Node.js'
      inputs:
        versionSpec: $(NODE_VERSION)
        
    # Add npm security audit step
    - script: |
        echo "Running npm security audit..."
        cd frontend
        npm audit --audit-level=moderate || echo "NPM audit completed with warnings"
      displayName: 'NPM Security Audit'
      
    # Add .NET security check
    - script: |
        echo "Checking .NET package vulnerabilities..."
        dotnet list package --vulnerable || echo ".NET security check completed"
      displayName: '.NET Security Check'
        
    - script: |
        echo "Restoring .NET dependencies..."
        dotnet restore --locked-mode
      displayName: 'Restore .NET Dependencies'
      
    - script: |
        echo "Building .NET backend..."
        dotnet build --configuration $(buildConfiguration) --no-restore
      displayName: 'Build Backend'
      
    - script: |
        echo "Installing and building React frontend..."
        cd frontend
        npm ci --silent
        npm run build
      displayName: 'Build Frontend'
      
    - script: |
        echo "Running backend tests..."
        dotnet test --configuration $(buildConfiguration) --no-build --logger trx --results-directory TestResults
      displayName: 'Run Backend Tests'
      
    - script: |
        echo "Running frontend tests..."
        cd frontend
        npm test
      displayName: 'Run Frontend Tests'
      
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: 'TestResults/*.trx'
        mergeTestResults: true
        
    - script: |
        echo "Building Docker image with security scanning..."
        # Build with explicit security flags
        docker build \
          --no-cache \
          --pull \
          --label "org.opencontainers.image.source=https://github.com/msftsean/rms-demo-esri" \
          --label "org.opencontainers.image.revision=$(Build.SourceVersion)" \
          --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
          -t rms-demo:$(Build.BuildId) .
        echo "Docker image built successfully: rms-demo:$(Build.BuildId)"
      displayName: 'Build Docker Image'
        
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Build Artifacts'
      inputs:
        targetPath: '.'
        artifact: 'build-context'

- stage: Deploy_Dev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev Environment'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'build-context'
            
          - script: |
              echo "======================================"
              echo "Deploying to Dev Environment"
              echo "======================================"
              echo "Build ID: $(Build.BuildId)"
              echo "Docker image: rms-demo:$(Build.BuildId)"
              echo "Branch: $(Build.SourceBranch)"
              echo "======================================"
              echo "Kubernetes deployment commands:"
              echo "kubectl apply -k k8s/ --context=dev-cluster"
              echo "kubectl -n rms set image deployment/rms-demo rms-demo=rms-demo:$(Build.BuildId)"
              echo "kubectl -n rms rollout status deployment/rms-demo"
              echo "======================================"
              echo "Dev deployment simulation complete"
            displayName: 'Deploy to Dev'

- stage: Deploy_Prod
  displayName: 'Deploy to Production'
  dependsOn: Deploy_Dev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production Environment'
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'build-context'
            
          - script: |
              echo "======================================"
              echo "Deploying to Production Environment"
              echo "======================================"
              echo "Build ID: $(Build.BuildId)"
              echo "Docker image: rms-demo:$(Build.BuildId)"
              echo "Branch: $(Build.SourceBranch)"
              echo "======================================"
              echo "Production deployment commands:"
              echo "kubectl apply -k k8s/ --context=prod-cluster"
              echo "kubectl -n rms set image deployment/rms-demo rms-demo=rms-demo:$(Build.BuildId)"
              echo "kubectl -n rms rollout status deployment/rms-demo"
              echo "======================================"
              echo "Production deployment simulation complete"
            displayName: 'Deploy to Production'
